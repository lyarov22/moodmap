import React, { useState, useEffect, useRef } from 'react';
import { View, Text, TouchableOpacity } from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import * as Location from 'expo-location';
import { StatusBar } from 'expo-status-bar';
import Toast from 'react-native-toast-message';
import UniversalMap, { UniversalMapHandle } from './UniversalMap';
import { moodEmojis, moodColors } from './constants/mood';
import MoodListScreen from './MoodListScreen';
import Constants from 'expo-constants';
import { getMoods, createMood } from './api';
import styles from './styles/App.styles';
import InfoModal from './InfoModal';
import PrivacyModal from './PrivacyModal';

interface UserLocation {
  latitude: number;
  longitude: number;
}

interface Mood {
  mood: number;
  coords: {
    lat: number;
    lng: number;
  };
  ip?: string;
  timestamp?: string;
}

const MAPBOX_TOKEN = (Constants.expoConfig?.extra as any)?.mapboxToken || process.env.EXPO_PUBLIC_MAPBOX_TOKEN || 'YOUR_MAPBOX_ACCESS_TOKEN';
 



export default function App(): React.JSX.Element {
  const [moods, setMoods] = useState<Mood[]>([]);
  const [userLocation, setUserLocation] = useState<UserLocation | null>(null);
  const [loading, setLoading] = useState(false);
  const [mapCenter, setMapCenter] = useState<[number, number]>([76.899425, 43.239221]);
  const [showMoodList, setShowMoodList] = useState(false);
  const [heatmapEnabled, setHeatmapEnabled] = useState(false);
  const [showInfoModal, setShowInfoModal] = useState(false);
  const [showPrivacyModal, setShowPrivacyModal] = useState(false);

  useEffect(() => {
    requestLocationPermission();
    fetchMoods();
  }, []);

  const requestLocationPermission = async () => {
    try {
      console.log('–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é...');
      const { status } = await Location.requestForegroundPermissionsAsync();
      console.log('–°—Ç–∞—Ç—É—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è:', status);
      
      if (status !== 'granted') {
        console.log('–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ');
        Toast.show({
          type: 'error',
          text1: '–û—à–∏–±–∫–∞',
          text2: '–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
          topOffset: 120,
        });
        return;
      }

      console.log('–ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ...');
      const location = await Location.getCurrentPositionAsync({
        accuracy: Location.Accuracy.Balanced,
      });
      
      const newLocation = {
        latitude: location.coords.latitude,
        longitude: location.coords.longitude,
      };
      
      console.log('–ü–æ–ª—É—á–µ–Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è:', newLocation);
      setUserLocation(newLocation);
      // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –ø–æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
      setMapCenter([newLocation.longitude, newLocation.latitude]);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:', error);
      Toast.show({
        type: 'error',
        text1: '–û—à–∏–±–∫–∞',
        text2: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞.',
        topOffset: 120,
      });
      // –û—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }
  };

  const fetchMoods = async () => {
    try {
      const data = await getMoods();
      setMoods(data);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π:', error);
    }
  };

  const submitMood = async (moodLevel: number) => {
    console.log('–ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞, —É—Ä–æ–≤–µ–Ω—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è:', moodLevel);
    console.log('–¢–µ–∫—É—â–∞—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è:', userLocation);
    
    if (!userLocation) {
      console.log('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Å–Ω–æ–≤–∞...');
      await requestLocationPermission();
      if (!userLocation) {
        Toast.show({
          type: 'error',
          text1: '–û—à–∏–±–∫–∞',
          text2: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –≤ –±—Ä–∞—É–∑–µ—Ä–µ.',
          topOffset: 120,
        });
        return;
      }
    }

    setLoading(true);
    console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä...');
    try {
      const data = await createMood(moodLevel, userLocation.latitude, userLocation.longitude);

      if (data.ok && data.success) {
        Toast.show({
          type: 'success',
          text1: '–£—Å–ø–µ—Ö',
          text2: '–í–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!',
          topOffset: 120,
        });
        fetchMoods(); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—É
      } else {
        Toast.show({
          type: 'info',
          text1: '–ù–µ —Ç–∞–∫ –±—ã—Å—Ç—Ä–æ!',
          text2: data.detail || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ',
          topOffset: 120,
        });
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è:', error);
      Toast.show({
        type: 'error',
        text1: '–û—à–∏–±–∫–∞',
        text2: '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.',
        topOffset: 120,
      });
    } finally {
      setLoading(false);
    }
  };


  const mapRef = useRef<UniversalMapHandle | null>(null);

  const renderMap = () => {
    return (
      <UniversalMap
        ref={mapRef}
        moods={moods}
        userLocation={userLocation}
        mapCenter={mapCenter}
        mapboxToken={MAPBOX_TOKEN}
        heatmapEnabled={heatmapEnabled}
      />
    );
  };

  if (showMoodList) {
    return (
      <MoodListScreen 
        moods={moods} 
        onClose={() => setShowMoodList(false)} 
      />
    );
  }

  return (
    <SafeAreaView style={styles.container} edges={['top', 'bottom']}>
      <StatusBar style="auto" />
      {renderMap()}

      {/* –ö–Ω–æ–ø–∫–∞ –º–µ–Ω—é —Å–≤–µ—Ä—Ö—É —Å–ø—Ä–∞–≤–∞ */}
      <View style={styles.topOverlay} pointerEvents="box-none">
        {/* –†—ã—á–∞–≥ —Ç–µ–ø–ª–æ–∫–∞—Ä—Ç—ã */}
        <View style={styles.heatToggleContainer}>
          <Text style={styles.heatToggleLabel}>–¢–µ–ø–ª–æ–∫–∞—Ä—Ç–∞</Text>
          <TouchableOpacity
            onPress={() => setHeatmapEnabled(prev => !prev)}
            style={[styles.toggle, heatmapEnabled && styles.toggleOn]}
          >
            <View style={[styles.knob, heatmapEnabled && styles.knobOn]} />
          </TouchableOpacity>
        </View>
        <TouchableOpacity 
          style={styles.infoButton} 
          onPress={() => setShowInfoModal(true)}
        >
          <Text style={styles.infoButtonText}>‚ÑπÔ∏è</Text>
        </TouchableOpacity>
        <TouchableOpacity 
          style={styles.menuButton} 
          onPress={() => setShowMoodList(true)}
        >
          <Text style={styles.menuButtonText}>‚ò∞</Text>
        </TouchableOpacity>
      </View>

      {/* –ü–ª–∞–≤–∞—é—â–∏–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è */}
      <View style={styles.overlayContainer} pointerEvents="box-none">
        {/* –ö–Ω–æ–ø–∫–∞ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ */}
        <View pointerEvents="box-none" style={styles.rightBottomOverlay}>
          <TouchableOpacity
            style={styles.gpsButton}
            onPress={() => {
              if (userLocation) {
                mapRef.current?.centerOn(userLocation.longitude, userLocation.latitude);
              } else {
                requestLocationPermission();
              }
            }}
          >
            <Text style={styles.gpsButtonText}>üìç</Text>
          </TouchableOpacity>
        </View>

        <View style={styles.bottomPanel}>
         {loading && (
             <Text style={styles.loadingText}>–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ...</Text>
           )}
          <Text style={styles.title}>–ö–∞–∫ –≤–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?</Text>

          <View style={styles.buttonRow}>
            {moodEmojis.map((emoji, index) => (
              <TouchableOpacity
                key={index}
                style={[styles.moodButton, { backgroundColor: moodColors[index] }]}
                onPress={() => submitMood(index + 1)}
                disabled={loading}
              >
                <Text style={styles.moodEmoji}>{emoji}</Text>
              </TouchableOpacity>
            ))}
          </View>

        </View>
      </View>
      
      <InfoModal 
        visible={showInfoModal}
        onClose={() => setShowInfoModal(false)}
        onPrivacyPress={() => {
          setShowInfoModal(false);
          setShowPrivacyModal(true);
        }}
      />
      
      <PrivacyModal 
        visible={showPrivacyModal}
        onClose={() => setShowPrivacyModal(false)}
      />
      
      <Toast />
    </SafeAreaView>
  );
}

  